version: v1
kind: kubernetes
application: potato-facts
targets: #This section defines the targets to which you are deploying, and their constraints.
  dev:
    # the name of an agent configured account
    account: demo-staging-cluster #sa-eks-direct #saClusterViaHelm
    # Optionally override the namespaces that are in the manifests
    namespace: borealis-dev
    strategy: rolling
  staging:
    # the name of an agent configured account
    account: demo-staging-cluster
    # Optionally override the namespaces that are in the manifests
    namespace: borealis-staging
    # This is the key to a strategy under the strategies map
    strategy: rolling
    # This is a list of manifest names that should be included in this deployment
    constraints:
      afterDeployment:
        - runWebhook:
            name: Integration_Tests
  infosec:
    # the name of an agent configured account
    account: demo-staging-cluster
    # Optionally override the namespaces that are in the manifests
    namespace: borealis-infosec
    strategy: rolling
  prod-east:
    account: demo-prod-west-cluster
    constraints:
      afterDeployment:
        - runWebhook:
            name: Security_Scanners
  prod-eu:
    # the name of an agent configured account
    account: demo-staging-cluster
    # Optionally override the namespaces that are in the manifests
    namespace: borealis-prod-eu
    strategy: myBlueGreen
  prod-west:
    account: demo-prod-west-cluster
    constraints:
      afterDeployment:
        - runWebhook:
            name: Send_Slack_Deployment_Complete
      beforeDeployment:
        - pause:
            requiresRoles:
              - Organization Admin
            untilApproved: true
  prod-west:
    # the name of an agent configured account
    account: demo-staging-cluster
    # Optionally override the namespaces that are in the manifests
    namespace: borealis-prod
    strategy: mycanary
  prod-apac:
    account: demo-prod-west-cluster
    constraints:
      afterDeployment:
        - runWebhook:
            name: Send_Slack_Deployment_Complete
      beforeDeployment:
        - pause:
            untilApproved: true
#  prod-east:
#    # the name of an agent configured account
#    account: 11-14-1
#    # Optionally override the namespaces that are in the manifests
#    namespace: borealis-prod-east
#    # This is the key to a strategy under the strategies map
#    strategy: mycanary
#    constraints:
#      dependsOn: [ "infosec","staging" ]
#      beforeDeployment:
#        - pause:
#            untilApproved: true

manifests:  # The map of strategies, a deployment target will reference one of these
  # This will read all yaml|yml files in a dir and deploy all manifests in that directory to all targets.
  - path: manifests/potato-facts.yml
  - path: manifests/potato-facts-external-service.yml
    targets: [prod-west, prod-eu]
  - path: manifests/potato-lies.yml
  - path: manifests/istio-files/
    targets:
      - prod-apac
strategies: #This section defines the strategies environments can use to deploy.
  myBlueGreen:
    blueGreen:
      redirectTrafficAfter:
        - analysis:
            interval: 10
            lookbackMethod: GROWING
            numberOfJudgmentRuns: 1
            queries:
              - avgCPUUsage-pass
            rollBackMode: manual
            rollForwardMode: automatic
            units: seconds
        - exposeServices:
            services:
              - potato-facts-internal
              - potato-lies-internal
              - potato-facts-external
              - potato-lies-external
            ttl:
              duration: 30
              unit: MINUTES
        - pause:
            untilApproved: true
      shutDownOldVersionAfter:
        - pause:
            untilApproved: true
        - runWebhook:
            name: Check_Logs
        - analysis:
            interval: 10
            lookbackMethod: GROWING
            numberOfJudgmentRuns: 1
            queries:
              - avgCPUUsage-pass
            rollBackMode: manual
            units: seconds
  mycanary:
    canary:
      steps:
        - exposeServices:
            services:
              - potato-facts-external
              - potato-lies-external
            ttl:
              duration: 30
              unit: MINUTES
        - setWeight:
            weight: 25
        - analysis:
            interval: 10
            lookbackMethod: GROWING
            numberOfJudgmentRuns: 1
            queries:
              - avgCPUUsage-pass
            rollBackMode: manual
            rollForwardMode: automatic
            units: seconds
        - runWebhook:
            name: Check_Logs
        - setWeight:
            weight: 50
        - analysis:
            interval: 10
            lookbackMethod: GROWING
            numberOfJudgmentRuns: 3
            queries:
              - avgCPUUsage-fail
              - avgCPUUsage-pass
            rollBackMode: manual
            rollForwardMode: manual
            units: seconds
        - runWebhook:
            name: Check_Logs
        - setWeight:
            weight: 100
  rolling:
    canary:
      steps:
        - setWeight:
            weight: 100
        - exposeServices:
            services:
              - potato-facts-internal
              - potato-lies-internal
            ttl:
              duration: 30
              unit: MINUTES
analysis: #This section defines queries against your monitoring system that can be used for automated canary analysis.
  defaultMetricProviderName: Stephen-Prometheus
  queries:
    - name: avgCPUUsage-pass
      upperLimit: 10000 #3
      lowerLimit: 0
      queryTemplate: >-
        avg (avg_over_time(container_cpu_system_seconds_total{job="kubelet"}[{{armory.promQlStepInterval}}]) )
    - name: avgCPUUsage-fail
      upperLimit: 0.001
      lowerLimit: 0
      queryTemplate: >-
        avg (avg_over_time(container_cpu_system_seconds_total{job="kubelet"}[{{armory.promQlStepInterval}}]) )

trafficManagement:
#  - targets: [prod-east]
#    smi:
#      - rootServiceName: potato-facts-cluster-svc
#      - rootServiceName: potato-lies-cluster-svc
  - targets: [prod-eu]
    kubernetes:
      - activeService: potato-facts-external
        previewService: potato-facts-internal
      - activeService: potato-lies-external
        previewService: potato-lies-internal
    targets:
      - prod-eu
  - istio:
      - virtualService:
          name: potato-facts
        destinationRule:
          name: potato-facts
          activeSubsetName: v1
      - virtualService:
          name: potato-lies-external
        destinationRule:
          name: potato-lies-external
          activeSubsetName: v1
    targets:
      - prod-apac
webhooks: #Webhooks can be used to run external automation.
  - bodyTemplate:
      inline: |-
        { "event_type": "webhookCallback", "client_payload": {
            "callbackUri": "{{armory.callbackUri}}/callback"
            }
        }
    headers:
      - key: Authorization
        value: token {{secrets.github_token}}
      - key: Content-Type
        value: application/json
    method: POST
    name: Check_Logs
    retryCount: 3
    uriTemplate: https://api.github.com/repos/{{secrets.github_org}}/{{secrets.github_repository}}/dispatches
  - bodyTemplate:
      inline: |-
        { "event_type": "checkLogs", "client_payload": {
            "callbackUri": "{{armory.callbackUri}}/callback"
            }
        }
    headers:
      - key: Authorization
        value: token {{secrets.github_token}}
      - key: Content-Type
        value: application/json
    method: POST
    name: Security_Scanners
    retryCount: 3
    uriTemplate: https://api.github.com/repos/{{secrets.github_org}}/{{secrets.github_repository}}/dispatches
  - bodyTemplate:
      inline: |-
        { "event_type": "checkLogs", "client_payload": {
            "callbackUri": "{{armory.callbackUri}}/callback"
            }
        }
    headers:
      - key: Authorization
        value: token {{secrets.github_token}}
      - key: Content-Type
        value: application/json
    method: POST
    name: Integration_Tests
    retryCount: 3
    uriTemplate: https://api.github.com/repos/{{secrets.github_org}}/{{secrets.github_repository}}/dispatches
  - bodyTemplate:
      inline: '{ "status_url": "https://console.cloud.armory.io/deployments/{{armory.deploymentId}}", "message": "Deployment of {{armory.applicationName}} to {{armory.environmentName}} is starting." }'
    disableCallback: true
    method: POST
    name: Send_Slack_Deployment_Starting
    retryCount: 3
    uriTemplate: '{{secrets.slackwebhookURL}}'
  - bodyTemplate:
      inline: '{ "status_url": "https://console.cloud.armory.io/deployments/{{armory.deploymentId}}", "message": "Deployment of {{armory.applicationName}} to {{armory.environmentName}} is complete." }'
    disableCallback: true
    method: POST
    name: Send_Slack_Deployment_Complete
    retryCount: 3
    uriTemplate: '{{secrets.slackwebhookURL}}'
  - bodyTemplate:
      inline: '{ "status_url": "https://console.cloud.armory.io/deployments/{{armory.deploymentId}}", "message": "Deployment of {{armory.applicationName}} to {{armory.environmentName}} requires a manual approval." }'
    disableCallback: true
    method: POST
    name: Send_Slack_Deployment_Approval_Required
    retryCount: 3
    uriTemplate: '{{secrets.slackwebhookURL}}'
